@startuml
skinparam classAttributeIconSize 0

ShopController "1" o-- "1" ClientModel : has
ShopController +-- ShopListener
ActionListener <|.. ShopListener : realizes
ShopController o-- ShopApplication
ShopApplication <|-- CMSApplication
ShopApplication <|-- IMSApplication
ShopApplication *-- GuiFactory
GuiFactory <|-- IMSGuiFactory
GuiFactory <|-- CMSGuiFactory
IMSGuiFactory -- Button
CMSGuiFactory -- Button
Button <|-- SaveButton
Button <|-- ClearButton
Button <|-- UpdateButton
Button <|-- SearchButton
Button <|-- CloseButton
IMSGuiFactory -- TextField
CMSGuiFactory -- TextField
IMSGuiFactory -- ScrollBar
CMSGuiFactory -- ScrollBar
TextField <|-- TextLabel
TextField <|-- TextArea
TextField <|-- Label

class ClientModel {
- aSocket: Socket
- socketOut: PrintWriter
- socketIn: BufferedReader
+ ClientModel(serverName: String, portNum: int)
+ communicateCMS(view: CMSView): void
+ communicateIMS(view: IMSView): void
+ close(): void
}

class ShopController {
- model: ClientModel
- imsView: ShopApplication
- cmsView: ShopApplication
+ ShopController(model: ClientModel, ims: ShopApplication, cms: ShopApplication)

}

class ShopListener {
+ actionPerformed(e: ActionEvent): void
}

interface ActionListener

abstract class ShopApplication {
- guiFactory: GuiFactory
+ createGuiApplication(title: String): void
}

interface GuiFactory {
+ createButton(label: String): Button
+ createTextField(): TextField
+ createMenu(): Menu
}

class IMSGuiFactory {
# s: Scrollbar
# b: Button
# m: Menu
+ createButton(label: String): Button
+ createTextField(): TextField
+ createMenu(): Menu
}

class CMSGuiFactory {
# s: Scrollbar
# b: Button
# m: Menu
+ createButton(label: String): Button
+ createTextField(): TextField
+ createMenu(): Menu
}

@enduml
}

public class GameView extends JFrame {

	private JTextField name = new JTextField(15);
	private JTextArea message = new JTextArea(1,3);
	private JLabel messageLabel = new JLabel("Message Window:");
	private JLabel marker = new JLabel("You are Player ");
	private JLabel username = new JLabel("Player Name:");
	private JButton[][] buttons = new JButton[3][3];

	public GameView() {
		buildGUI();
		setTitle("Tic-Tac-Toe");
		pack();	
	}
	
	/**
	 * Build the GUI components and combine together into the Frame.
	 */
	public void buildGUI() {
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JPanel display = new JPanel(new BorderLayout(10,10));
		display.setBorder(new EmptyBorder(20,50,20,50));
		
		marker.setHorizontalAlignment(JLabel.CENTER);
		
		display.add("North", combineGridMessage());
		display.add("Center", marker);
		display.add("South", userNameField());
		this.add(display);
	}
	
	/**
	 * Combine the text field for the user name with the label.
	 * @return (JPanel) a flow layout of label and text field.
	 */
	public JPanel userNameField() {
		JPanel south = new JPanel();
		south.add(username);
		south.add(name);
		return south;
	}
	
	/**
	 * Build the grid of 9 buttons to replicate the tic-tac-toe board.
	 * @return (JPanel) a grid layout of 9 buttons.
	 */
	public JPanel buildButtonGrid() {
		JPanel buttonGrid = new JPanel();
		buttonGrid.setLayout(new GridLayout(3, 3));
		buttonGrid.setPreferredSize(new Dimension(200,200));
		
		for (int i=0; i<3; i++) {
			for (int j=0; j<3; j++) {
				buttons[i][j] = new JButton("");
				buttons[i][j].setVisible(true);
				
				buttonGrid.add(buttons[i][j]);
			}
		}
		return buttonGrid;
	}
	
	/**
	 * Combine the grid layout of buttons with the border layout
	 * of message header and body.
	 * @return (JLabel) Border layout JLabel with header and message
	 * and buttons.
	 */
	public JPanel combineGridMessage() {
		JPanel messageArea = new JPanel(new BorderLayout(10,10));
		messageArea.setPreferredSize(new Dimension(300,300));
		setupMessage();
		messageArea.add("North", messageLabel);
		messageArea.add("Center", message);
		messageArea.add("South", buildButtonGrid());
		return messageArea;
	}
	
	/**
	 * Set up the message parameters, to be displayed in the GUI.
	 */
	public void setupMessage() {
		message.setLineWrap(true);
		message.setWrapStyleWord(true);
		setMessage("\nWelcome to the Game: Tic-Tac-Toe!" + 
				"\nPlease enter your name below.");
	}
	
	public void updateButtons(String board) {
		String[] labels = cleanString(board);
		int k = 0;
		for (int i=0; i<3; i++) {
			for (int j=0; j<3; j++) {
				getButtons()[i][j].setText(labels[k]);
				k++;
			}
		}
	}
	
	public String[] cleanString(String s) {
		s = s.replaceAll("\\[", "").replaceAll("\\]","");
		String[] str = s.split(",");
		return str; 
	}
	
	public String getName() {
		return name.getText();
	}
	
	public JTextField getNameField() {
		return name;
	}
	
	public void setMessage(String message) {
		this.message.setText(message);
	}
	
	public void setMarker(String marker) {
		this.marker.setText(marker);;
	}
	
	public JButton[][] getButtons() {
		return buttons;
	}
	
	/**
	 * Adds an action listener to the game buttons.
	 * @param b (JButton) button to add action listener to.
	 * @param listenButton (ActionListener) action listener being added to button.
	 */
	public void addButtonListener(JButton b, ActionListener listenButton) {
		b.addActionListener(listenButton);
	}
	
	/**
	 * Adds an action listener to the name text field.
	 * @param listenName (ActionListener) action listener being 
	 * added to the name JTextField.
	 */
	public void addNameListener(ActionListener listenName) {
		name.addActionListener(listenName);
	}
	
	public void displayErrorMessage(String s) {
		JOptionPane.showMessageDialog(this, s);
	}
}